let express,error,success,ApolloServer,connection,dotenv,cors,bodyParser,AuthMiddleware,schemaDirectives,AppModels,typeDefs,resolvers;_5be‍.w("express",[["default",["express"],function(v){express=v}]]);_5be‍.w("consola",[["error",["error"],function(v){error=v}],["success",["success"],function(v){success=v}]]);_5be‍.w("apollo-server-express",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}]]);_5be‍.w("./Database",[["connection",["connection"],function(v){connection=v}]]);_5be‍.w("dotenv",[["default",["dotenv"],function(v){dotenv=v}]]);_5be‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_5be‍.w("body-parser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_5be‍.w("./middleware/auth",[["AuthMiddleware",["AuthMiddleware"],function(v){AuthMiddleware=v}]]);_5be‍.w("./directives",[["schemaDirectives",["schemaDirectives"],function(v){schemaDirectives=v}]]);_5be‍.w("./Database/Models",[["*",null,function(v){AppModels=v}]]);_5be‍.w("./TypeDefs",[["default",["typeDefs"],function(v){typeDefs=v}]]);_5be‍.w("./Resolvers",[["default",["resolvers"],function(v){resolvers=v}]]);












dotenv.config();
const app = express();
app.disable("x-powered-by");
app.use(bodyParser.json());
app.use(cors());

const apolloServer = new ApolloServer({
  typeDefs,
  resolvers,
  schemaDirectives,
  context: async ({ req }) => {
    const { user, isAuth } = await AuthMiddleware(req);
    return {
      req,
      user,
      isAuth,
      ...AppModels,
    };
  },
});

const startServer = async () => {
  try {
    await apolloServer.start();
    apolloServer.applyMiddleware({ app, cors: true, path: "/graphql" });
    const PORT = process.env.PORT || 80;
    app.use("/", (req, res, next) => {
      res.send({ message: "Hello" });
    });
    await connection();
    app.listen(PORT, () =>
      success({
        badge: true,
        message: `Server ready on PORT: ${PORT}`,
      })
    );
  } catch (err) {
    error({
      badge: true,
      message: err.message,
    });
  }
};

startServer();
